task_name_max_width = 310

setup_task_list = () ->
  $("#tasks").sortable({
    connectWith: ".assigned-task",
    cancel: ".ui-state-disabled", # disable sorting completed tasks

    receive: (event, ui) ->
      $.ajax({
        async: true,
        type: "POST",
        url: "<%= url_for "/deassign_task" %>",
        data: { project: project_key, task_id: ui.item.data('id') },
        dataType: 'json',
      })

    update: (event, ui) ->
      data = $("#tasks").sortable('serialize')
      data = data.replace(/.*template&/, '') # remove template element
      data = "project=#{project_key}&" + data
      $.post("<%= url_for "/task_sorted" %>", data)

    stop: (event, ui) ->
      # if task was completed, move to last
      # should be in trashbox's drop handler, but there is timing problem
      if ui.item.hasClass('ui-state-disabled')
        $('#tasks').append(ui.item)
  })

setup_task_input = () ->
  $("input#task").keypress((event) ->
    text = $("input#task").val()

    if text != "" && (event.keyCode && event.keyCode == 13)
      add_task(text)
      $("input#task").val('')
  )

load_tasks = () ->
  tasks = null
  $.ajax({
    async: false,
    type: "GET",
    url: "<%= url_for "/tasks" %>",
    data: { project: project_key },
    dataType: 'json',
  }).done((data) ->
    tasks = data
  )

  $.each(tasks, (i) ->
    task = add_task_html(this._id, this.name)
    if this.complete
      task.addClass('ui-state-disabled')
      if !$('#show_trashes_check').attr('checked')
        task.hide()
  )

add_task = (name) ->
  # send to server
  task_id = null
  $.ajax({
    async: false,
    type: "POST",
    url: "<%= url_for "/new_task" %>",
    data: { project: project_key, name: name }
  }).done((id) ->
    task_id = id
  )

  add_task_html(task_id, name)

add_task_html = (id, name) ->
  # copy element
  new_task = $('#task-template').clone()

  new_task.data('id', id)
  new_task.data('name', name)

  new_task.attr('id', 'task_' + id)
  new_task.find('.name').text(limit_task_name_len(name))
  new_task.show()

  # click edit icon -> comment edit
  new_task.find('.edit').click(()->
    begin_edit_task($(this).parent())
  )

  # show edit icons when mouse hover
  enable_edit_hover(new_task)

  # if there is completed task, insert before them
  completes = $('#tasks').find('.ui-state-disabled')
  if completes.length > 0
    completes.first().before(new_task)
  else
    $("#tasks").append(new_task)

  new_task

limit_task_name_len = (name) ->
  ret = name.replace(/\n.+$/, "") # get first line
  ret = truncate_by_width(ret, task_name_max_width, $('#ruler'))
  ret

begin_edit_task = (elem) ->
  disableSortable()
  disable_edit_hover(elem)

  elem.find('.name').hide()
  elem.find('.edit-box').show()
  elem.find('.comment').val(elem.data('name')).select()

  elem.find('.btn.cancel').unbind('click').click(() ->
    end_edit_task(elem)
  )
  elem.find('.btn.ok').unbind('click').click(() ->
    end_edit_task(elem)

    # update task title & internal data
    org_name = elem.find('.comment').val()
    elem.data('name', org_name)
    elem.find('.name').text(limit_task_name_len(org_name))

    # send to server
    $.post('<%= url_for "/edit_task" %>',
      { project: project_key, id: elem.data('id'), value: org_name }
    )
  )

end_edit_task = (elem) ->
  enableSortable()
  enable_edit_hover(elem)

  elem.find('.name').show()
  elem.find('.edit-box').hide()

enable_edit_hover = (elem) ->
  elem.hover(
    () ->
      $(this).find('.edit').show()
    ,
    () ->
      $(this).find('.edit').hide()
  )

disable_edit_hover = (elem) ->
  elem.unbind('hover')
  elem.find('.edit').hide()
