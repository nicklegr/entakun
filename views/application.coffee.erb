update_title = (title) ->
  document.title = title + ' - entakun'

update_project_title = () ->
  title = null
  $.ajax({
    async: false,
    type: "GET",
    url: "<%= url_for "/project_name" %>",
    data: { project: project_key }
  }).done((data) ->
    title = data
  )

  $('#project-name').find('.name').text(title)
  update_title(title)

find_object_top = (elem) ->
  e = elem.parent()
  while true
    if e.attr('id')
      return e

    e = e.parent()

disableSortable = (settings, self) ->
  $("#tasks, .assigned-task").sortable('disable')

enableSortable = (settings, self) ->
  $("#tasks, .assigned-task").sortable('enable')

enable_inplace_edit = (elem, edit_url, callback, disable_sortable) ->
  option = {
    submitdata : (value, settings) ->
      top_elem = find_object_top($(this))
      {
        project: project_key,
        id: top_elem.data('id'),
      }
    event: 'edit_event',
    cssclass: 'editing',
    select: true,
    callback: callback,
    # onblur: 'ignore'
  }

  # http://stackoverflow.com/questions/9610041/can-the-onblur-event-be-used-with-jeditable-and-jquery-ui-sortable
  if disable_sortable
    option['onedit'] = disableSortable
    option['onsubmit'] = enableSortable
    option['onreset'] = enableSortable

  elem.find('.name').editable(edit_url, option)

  elem.find('.edit').click(()->
    $(this).prev().trigger('edit_event')
  )

  # show edit icons when mouse hover
  elem.hover(
    () ->
      $(this).find('.edit').show()
    ,
    () ->
      $(this).find('.edit').hide()
  )

enable_inplace_delete = (elem, delete_url) ->
  elem.find('.delete').click(()->
    top_elem = find_object_top($(this))

    $.ajax({
      async: true,
      type: "POST",
      url: delete_url,
      data: { project: project_key, id: top_elem.data('id') },
      dataType: 'json',
    })

    top_elem.effect('fade', {}, 300, () ->
      $(this).remove()
    )
  )

  # show edit icons when mouse hover
  elem.hover(
    () ->
      $(this).find('.delete').show()
    ,
    () ->
      $(this).find('.delete').hide()
  )

add_task = (name) ->
  # send to server
  task_id = null
  $.ajax({
    async: false,
    type: "POST",
    url: "<%= url_for "/new_task" %>",
    data: { project: project_key, name: name }
  }).done((id) ->
    task_id = id
  )

  add_task_html(task_id, name)

add_task_html = (id, name) ->
  # copy element
  new_task = $('#task-template').clone()
  new_task.attr('id', 'task_' + id)
  new_task.data('id', id)
  new_task.find('.name').text(name)
  new_task.show()

  enable_inplace_edit(new_task, '<%= url_for "/edit_task" %>', null, true)
  enable_inplace_delete(new_task, '<%= url_for "/delete_task" %>')

  $("ul#tasks").append(new_task)
  new_task

add_staff = (name) ->
  # send to server
  staff_id = null
  $.ajax({
    async: false,
    type: "POST",
    url: "<%= url_for "/new_staff" %>",
    data: { project: project_key, name: name }
  }).done((id) ->
    staff_id = id
  )

  add_staff_html(staff_id, name)

add_staff_html = (id, name) ->
  # copy element
  new_staff = $('#staff-template').clone()
  new_staff.attr('id', 'staff_' + id)
  new_staff.data('id', id)
  new_staff.find('.name').text(name)
  new_staff.show()

  # assigned tasks
  new_staff.find(".assigned-task").sortable({
    connectWith: "ul#tasks,ul.assigned-task",

    receive: (event, ui) ->
      if $(this).find('li').length >= 2
        # Don't assign multiple tasks to one person
        $(ui.sender).sortable('cancel')
      else if ui.item.hasClass('ui-state-disabled')
        # avoid completed task assign
        $(ui.sender).sortable('cancel')
      else
        $.ajax({
          async: true,
          type: "POST",
          url: "<%= url_for "/assign_task" %>",
          data: {
            project: project_key,
            task_id: ui.item.data('id'),
            staff_id: $(this).parent().data('id'),
          },
          dataType: 'json',
        })

    stop: (event, ui) ->
      # if task was completed, move to incoming list
      # should be in trashbox's drop handler, but it does not work
      if ui.item.hasClass('ui-state-disabled')
        $('#tasks').append(ui.item)
  })

  enable_inplace_edit(new_staff.find('.staff-name'), '<%= url_for "/edit_staff" %>')
  enable_inplace_delete(new_staff.find('.staff-name'), '<%= url_for "/delete_staff" %>')

  $("#staffs").append(new_staff)
  new_staff

add_staff_event = () ->
  name = window.prompt('名前を入力してください')
  if name
    add_staff(name)

add_followee_html = (project_key, staff_id, staff_name, task_name) ->
  # copy element
  new_followee = $('#followee-template').clone()
  new_followee.removeAttr('id') # don't set. to avoid dup id with staff
  new_followee.find('.followee-name > .name').text(staff_name)
  new_followee.show()

  new_followee.data('followee', { project: project_key, staff: staff_id })

  if task_name != ''
    new_followee.find('.task > .name').text(task_name)
  else
    new_followee.find('.task').hide()

  # in-place delete
  name = new_followee.find('.followee-name')
  name.find('.delete').click(()->
    # remove cookie
    data = new_followee.data('followee')
    followees = load_followees()
    followees = $.grep(followees, (e) ->
      return !(e['project'] == data['project'] && e['staff'] == data['staff'])
    )
    save_followees(followees)

    # fade out
    $(this).parents('.followee').effect('fade', {}, 300, () ->
      $(this).remove()
    )
  )

  # show delete icon when mouse hover
  name.hover(
    () ->
      $(this).find('.delete').show()
    ,
    () ->
      $(this).find('.delete').hide()
  )

  $("#followees").append(new_followee)
  new_followee

update_followee_submit_button = () ->
  enable = false

  $('[id*="followee-select"] input').each((i)->
    if $(this).attr('checked')
      enable = true
  )

  if enable
    $('#follow-members-submit').removeClass('disabled')
    $('#follow-members-submit').unbind('click')
    $('#follow-members-submit').click(()->
      $('#follow-members').submit()
    )
  else
    $('#follow-members-submit').addClass('disabled')
    $('#follow-members-submit').unbind('click')

setup_add_follow_modal = () ->
  $('#add-followee').on('show', () ->
    update_followee_submit_button()
  )

  $('#follow-url').submit(() ->
    url = $(this).find('input').val()
    project = url.replace(/// .+projects/ ///, '')
    send_data = "project=#{project}"

    # for after use
    $('#follow-members').find('input[name="project"]').val(project)

    # @todo show project title?

    # clear existing staff
    $('[id*="followee-select"]').empty()

    # get staff list
    $.get($(this).attr('action'), send_data, (data) ->
      $.each(data, (i) ->
        staff = this
        elem = $('#follow-member-template').clone()
        elem.removeAttr('id')
        elem.find('input').removeAttr('checked')
        elem.find('input').attr('name', staff['_id'])
        elem.find('span').text(staff['name'])
        elem.show()
        $('#followee-select-' + i).append(elem)
      )

      # update submit button when check state changed
      $('[id*="followee-select"] input').unbind('click')
      $('[id*="followee-select"] input').click(() ->
        update_followee_submit_button()
      )
    , 'json')

    return false
  )

  $('#follow-members').submit(()->
    follow_project_key = $(this).find('input[name="project"]').val()

    # save to cookie
    followees = load_followees()

    $(this).find('[id*="followee-select"] > label').each((i)->
      if $(this).find('input').attr('checked')
        staff_id = $(this).find('input').attr('name')

        # follow if not already followed
        if $.grep(followees, (e) -> e.project == follow_project_key && e.staff == staff_id).length == 0
          followees.push({ project: follow_project_key, staff: staff_id })
    )

    save_followees(followees)

    update_followees()

    $('#add-followee').modal('hide')

    return false
  )

load_followees = () ->
  followees = $.cookie("entakun-followees")

  if followees == null
    followees = []

  followees

save_followees = (list) ->
  $.cookie("entakun-followees", list)

update_followees = () ->
  elems = $.grep($('#followees > .followee'), (e) ->
    $(e).attr('id') != 'followee-template'
  )
  $(elems).remove()

  followees = load_followees()

  if followees.length > 0
    followees_data = null
    $.ajax({
      async: false,
      type: "GET",
      url: "<%= url_for "/lookup_followees" %>",
      data: { followees: followees },
      dataType: 'json',
    }).done((data) ->
      followees_data = data
    )

    $.each(followees_data, (i) ->
      add_followee_html(this.project, this.staff, this.staff_name, this.task_name)
    )

$ ->
  # prevent XHR response caching by IE
  $.ajaxSetup({ cache: false })

  $.cookie.defaults['expires'] = 365 # @todo unlimited?
  $.cookie.json = true

  $('[placeholder]').ahPlaceholder({
    placeholderColor : 'silver',
    placeholderAttr  : 'placeholder',
    likeApple        : true
  })

  # task list
  $("#tasks").sortable({
    connectWith: "ul.assigned-task",
    receive: (event, ui) ->
      $.ajax({
        async: true,
        type: "POST",
        url: "<%= url_for "/deassign_task" %>",
        data: { project: project_key, task_id: ui.item.data('id') },
        dataType: 'json',
      })

    update: (event, ui) ->
      data = $("#tasks").sortable('serialize')
      data = data.replace(/.*template&/, '') # remove template element
      data = "project=#{project_key}&" + data
      $.post("<%= url_for "/task_sorted" %>", data)
  })

  # task input
  $("input#task").keypress((event) ->
    text = $("input#task").val()

    if text != "" && (event.keyCode && event.keyCode == 13)
      add_task(text)
      $("input#task").val('')
  )

  # trashbox
  $("#trashbox").droppable({
    tolerance: 'touch',

    activate: (event, ui) ->
      $('#trashbox-img').attr('src', '<%= url_for "/img/TrashBox_Opened.png" %>')

    deactivate: (event, ui) ->
      $('#trashbox-img').attr('src', '<%= url_for "/img/TrashBox_Closed.png" %>')

    drop: (event, ui) ->
      $.ajax({
        async: true,
        type: "POST",
        url: "<%= url_for "/complete_task" %>",
        data: { project: project_key, task_id: ui.draggable.data('id') },
        dataType: 'json',
      })

      ui.draggable.addClass('ui-state-disabled')
      if !$('#show_trashes_check').attr('checked')
        ui.draggable.hide()

      $('#trashbox-img').effect('bounce', {}, 150)
  })

  # get tasks
  tasks = null
  $.ajax({
    async: false,
    type: "GET",
    url: "<%= url_for "/tasks" %>",
    data: { project: project_key },
    dataType: 'json',
  }).done((data) ->
    tasks = data
  )

  $.each(tasks, (i) ->
    task = add_task_html(this._id, this.name)
    if this.complete
      task.addClass('ui-state-disabled')
      if !$('#show_trashes_check').attr('checked')
        task.hide()
  )

  # get staffs
  staffs = null
  $.ajax({
    async: false,
    type: "GET",
    url: "<%= url_for "/staffs" %>",
    data: { project: project_key },
    dataType: 'json',
  }).done((data) ->
    staffs = data
  )

  $.each(staffs, (i) ->
    staff = add_staff_html(this._id, this.name)

    if this.task_id
      staff.find('.assigned-task').append($('#task_' + this.task_id))
  )

  # add staff handler
  $('#add-staff').click(add_staff_event)

  update_followees()

  # show trash toggle
  $('#show_trashes_check').change(() ->
      if $(this).attr("checked")
        $('.ui-state-disabled').show()
      else
        $('.ui-state-disabled').hide()
  )

  # project title
  update_project_title()
  enable_inplace_edit($('#project-name'), '<%= url_for "/edit_project" %>', (value, settings) ->
    update_title(value)
  )

  setup_add_follow_modal()
