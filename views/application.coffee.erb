find_object_top = (elem) ->
  e = elem.parent()
  while true
    if e.attr('id')
      return e

    e = e.parent()

enable_inplace_edit = (elem, edit_url) ->
  elem.find('.name').editable(edit_url, {
    submitdata : (value, settings) ->
      top_elem = find_object_top($(this))
      {
        project: project_key,
        id: top_elem.attr('id'),
      }
    event: 'edit_event',
    cssclass: 'editing',
    # onblur: 'ignore'
  })

  elem.find('.edit').click(()->
    $(this).prev().trigger('edit_event')
  )

  # show edit icons when mouse hover
  elem.hover(
    () ->
      $(this).find('.edit').show()
    ,
    () ->
      $(this).find('.edit').hide()
  )

enable_inplace_delete = (elem, delete_url) ->
  elem.find('.delete').click(()->
    top_elem = find_object_top($(this))

    $.ajax({
      async: true,
      type: "POST",
      url: delete_url,
      data: { project: project_key, id: top_elem.attr('id') },
      dataType: 'json',
    })

    top_elem.effect('fade', {}, 300, () ->
      $(this).remove()
    )
  )

  # show edit icons when mouse hover
  elem.hover(
    () ->
      $(this).find('.delete').show()
    ,
    () ->
      $(this).find('.delete').hide()
  )

add_task = (name) ->
  # send to server
  task_id = null
  $.ajax({
    async: false,
    type: "POST",
    url: "<%= url_for "/new_task" %>",
    data: { project: project_key, name: name }
  }).done((id) ->
    task_id = id
  )

  add_task_html(task_id, name)

add_task_html = (id, name) ->
  # copy element
  new_task = $('#task-template').clone()
  new_task.attr('id', id)
  new_task.find('.name').text(name)
  new_task.show()

  enable_inplace_edit(new_task, '<%= url_for "/edit_task" %>')
  enable_inplace_delete(new_task, '<%= url_for "/delete_task" %>')

  $("ul#tasks").append(new_task)
  new_task

add_staff = (name) ->
  # send to server
  staff_id = null
  $.ajax({
    async: false,
    type: "POST",
    url: "<%= url_for "/new_staff" %>",
    data: { project: project_key, name: name }
  }).done((id) ->
    staff_id = id
  )

  add_staff_html(staff_id, name)

add_staff_html = (id, name) ->
  # copy element
  new_staff = $('#staff-template').clone()
  new_staff.attr('id', id)
  new_staff.find('.name').text(name)
  new_staff.show()

  # assigned tasks
  new_staff.find(".assigned-task").sortable({
    connectWith: "ul#tasks,ul.assigned-task",

    receive: (event, ui) ->
      if $(this).find('li').length >= 2
        # Don't assign multiple tasks to one person
        $(ui.sender).sortable('cancel')
      else if ui.item.hasClass('ui-state-disabled')
        # avoid completed task assign
        $(ui.sender).sortable('cancel')
      else
        $.ajax({
          async: true,
          type: "POST",
          url: "<%= url_for "/assign_task" %>",
          data: {
            project: project_key,
            task_id: ui.item.attr('id'),
            staff_id: $(this).parent().attr('id'),
          },
          dataType: 'json',
        })

    stop: (event, ui) ->
      # if task was completed, move to incoming list
      # should be in trashbox's drop handler, but it does not work
      if ui.item.hasClass('ui-state-disabled')
        $('#tasks').append(ui.item)
  })
  new_staff.find("ul.assigned-task").disableSelection()

  enable_inplace_edit(new_staff.find('.staff-name'), '<%= url_for "/edit_staff" %>')
  enable_inplace_delete(new_staff.find('.staff-name'), '<%= url_for "/delete_staff" %>')

  $("#staffs").append(new_staff)
  new_staff

add_staff_event = () ->
  name = window.prompt('名前を入力してください')
  if name
    add_staff(name)

$ ->
  # prevent XHR response caching by IE
  $.ajaxSetup({ cache: false })

  $('[placeholder]').ahPlaceholder({
    placeholderColor : 'silver',
    placeholderAttr  : 'placeholder',
    likeApple        : true
  })

  # task list
  $("ul#tasks").sortable({
    connectWith: "ul.assigned-task",
    receive: (event, ui) ->
      $.ajax({
        async: true,
        type: "POST",
        url: "<%= url_for "/deassign_task" %>",
        data: { project: project_key, task_id: ui.item.attr('id') },
        dataType: 'json',
      })
  })
  $("ul#tasks").disableSelection()

  # task input
  $("input#task").keypress((event) ->
    text = $("input#task").val()

    if text != "" && (event.keyCode && event.keyCode == 13)
      add_task(text)
      $("input#task").val('')
  )

  # trashbox
  $("#trashbox").droppable({
    tolerance: 'touch',

    activate: (event, ui) ->
      $('#trashbox-img').attr('src', '<%= url_for "/img/TrashBox_Opened.png" %>')

    deactivate: (event, ui) ->
      $('#trashbox-img').attr('src', '<%= url_for "/img/TrashBox_Closed.png" %>')

    drop: (event, ui) ->
      $.ajax({
        async: true,
        type: "POST",
        url: "<%= url_for "/complete_task" %>",
        data: { project: project_key, task_id: ui.draggable.attr('id') },
        dataType: 'json',
      })

      ui.draggable.addClass('ui-state-disabled')
      if !$('#show_trashes_check').attr('checked')
        ui.draggable.hide()

      $('#trashbox-img').effect('bounce', {}, 150)
  })

  # get tasks
  tasks = null
  $.ajax({
    async: false,
    type: "GET",
    url: "<%= url_for "/tasks" %>",
    data: { project: project_key },
    dataType: 'json',
  }).done((data) ->
    tasks = data
  )

  $.each(tasks, (i) ->
    task = add_task_html(this._id, this.name)
    if this.complete
      task.addClass('ui-state-disabled')
      if !$('#show_trashes_check').attr('checked')
        task.hide()
  )

  # get staffs
  staffs = null
  $.ajax({
    async: false,
    type: "GET",
    url: "<%= url_for "/staffs" %>",
    data: { project: project_key },
    dataType: 'json',
  }).done((data) ->
    staffs = data
  )

  $.each(staffs, (i) ->
    staff = add_staff_html(this._id, this.name)

    if this.task_id
      staff.find('.assigned-task').append($('#' + this.task_id))
  )

  # add staff handler
  $('#add-staff').click(add_staff_event)

  # show trash toggle
  $('#show_trashes').toggleButtons(
    onChange: (event, status, e) ->
      if status
        $('.ui-state-disabled').show()
      else
        $('.ui-state-disabled').hide()
  )